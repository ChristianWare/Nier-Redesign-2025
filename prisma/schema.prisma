generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER
  ADMIN
  DRIVER
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELED
}

enum ServiceType {
  AIRPORT_POINT
  HOURLY
  POINT_TO_POINT
}

model User {
  id             String     @id @default(uuid())
  email          String     @unique
  name           String?
  role           Role       @default(CUSTOMER)
  hashedPassword String?
  bookings       Booking[]
  driver         Driver?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

model Driver {
  id          String       @id @default(uuid())
  licenseNo   String       @unique
  phone       String?
  user        User         @relation(fields: [userId], references: [id])
  userId      String       @unique
  vehicle     Vehicle?     @relation("DriverVehicle", fields: [vehicleId], references: [id])
  vehicleId   Int?         @unique
  assignments Assignment[]
}

model Service {
  id          Int       @id @default(autoincrement())
  name        String
  type        ServiceType
  description String?
  baseFare    Int
  perMile     Int
  bookings    Booking[]
}

model Vehicle {
  id          Int       @id @default(autoincrement())
  name        String
  capacity    Int
  luggageCap  Int
  imageUrl    String
  baseFare    Int
  perMile     Int
  active      Boolean   @default(true)
  bookings    Booking[]
  driver      Driver?   @relation("DriverVehicle")
}

model Location {
  id       Int       @id @default(autoincrement())
  label    String?
  street   String
  city     String
  state    String
  zip      String
  lat      Float
  lng      Float
  pickups  Booking[] @relation("pickup")
  dropoffs Booking[] @relation("dropoff")
}

model Booking {
  id            String        @id @default(cuid())
  user          User          @relation(fields: [userId], references: [id])
  userId        String
  service       Service       @relation(fields: [serviceId], references: [id])
  serviceId     Int
  vehicle       Vehicle       @relation(fields: [vehicleId], references: [id])
  vehicleId     Int
  pickup        Location      @relation("pickup",  fields: [pickupId],  references: [id])
  dropoff       Location      @relation("dropoff", fields: [dropoffId], references: [id])
  pickupId      Int
  dropoffId     Int
  scheduledAt   DateTime
  passengers    Int
  luggage       Int
  distanceM     Int
  durationS     Int
  priceCents    Int
  status        BookingStatus @default(PENDING)
  notes         String?
  payment       Payment?
  assignment    Assignment?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Payment {
  id          String   @id
  booking     Booking  @relation(fields: [bookingId], references: [id])
  bookingId   String   @unique
  amountCents Int
  currency    String   @default("usd")
  status      String
  createdAt   DateTime @default(now())
}

model Assignment {
  id         String   @id @default(uuid())
  booking    Booking  @relation(fields: [bookingId], references: [id])
  bookingId  String   @unique
  driver     Driver   @relation(fields: [driverId], references: [id])
  driverId   String
  assignedAt DateTime @default(now())
}
